
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://fuqibkjdvpmbegibcyhl.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImZ1cWlia2pkdnBtYmVnaWJjeWhsIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDY0MzE5OTIsImV4cCI6MjA2MjAwNzk5Mn0.xuOIxiIPB6QSsTdWRKxb3YLrUYA6__AWz0eBZz1Wx9Q";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

/**
 * Invoke an edge function with the given name and payload
 * @param functionName Name of the edge function to invoke
 * @param payload Payload to send to the edge function
 * @returns The response from the edge function
 */
export async function invokeEdgeFunction<T>(functionName: string, payload: any): Promise<T> {
  try {
    // Check if the user has a valid session
    const { data: sessionData, error: sessionError } = await supabase.auth.getSession();
    if (sessionError) {
      console.warn(`Authentication warning, continuing as anonymous: ${sessionError.message}`);
    }
    
    // Call the edge function with the given name and payload
    const { data, error } = await supabase.functions.invoke<T>(functionName, {
      body: payload
    });

    if (error) {
      console.error(`Error invoking edge function '${functionName}':`, error);
      throw new Error(`Error invoking ${functionName}: ${error.message}`);
    }

    return data;
  } catch (error) {
    console.error(`Failed to invoke edge function '${functionName}':`, error);
    throw error;
  }
}

/**
 * Check if the current user has a valid auth session
 * @returns True if the user has a valid session, false otherwise
 */
export async function checkAuthSession(): Promise<boolean> {
  try {
    const { data, error } = await supabase.auth.getSession();
    
    if (error) {
      console.error('Auth session check error:', error);
      return false;
    }
    
    // Check if session exists and is valid
    return !!data.session && !!data.session.user && 
      new Date(data.session.expires_at * 1000) > new Date();
  } catch (error) {
    console.error('Failed to check auth session:', error);
    return false;
  }
}
