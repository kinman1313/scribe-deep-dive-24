
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';
import { toast } from '@/components/ui/use-toast';

const SUPABASE_URL = "https://fuqibkjdvpmbegibcyhl.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImZ1cWlia2pkdnBtYmVnaWJjeWhsIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDY0MzE5OTIsImV4cCI6MjA2MjAwNzk5Mn0.xuOIxiIPB6QSsTdWRKxb3YLrUYA6__AWz0eBZz1Wx9Q";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(
  SUPABASE_URL, 
  SUPABASE_PUBLISHABLE_KEY, 
  {
    auth: {
      persistSession: true,
      autoRefreshToken: true,
      detectSessionInUrl: true
    },
    global: {
      headers: {
        'Content-Type': 'application/json'
      }
    }
  }
);

/**
 * Check if the current session is valid
 * @returns boolean indicating if the session is valid
 */
export const checkAuthSession = async (): Promise<boolean> => {
  try {
    const { data, error } = await supabase.auth.getSession();
    if (error) {
      console.error("Auth session error:", error);
      return false;
    }
    
    const session = data?.session;
    const isValid = !!session && new Date(session.expires_at * 1000) > new Date();
    console.log("Auth session check:", { 
      hasSession: !!session, 
      isValid,
      expiresAt: session ? new Date(session.expires_at * 1000).toISOString() : 'none',
      userId: session?.user?.id || 'not authenticated'
    });
    
    return isValid;
  } catch (error) {
    console.error("Exception checking auth session:", error);
    return false;
  }
};

/**
 * Invokes a Supabase Edge Function with the given name and payload
 * @param functionName The name of the Edge Function to invoke
 * @param payload The payload to send to the Edge Function
 * @returns The response from the Edge Function
 */
export const invokeEdgeFunction = async <T = any>(functionName: string, payload?: any): Promise<T> => {
  try {
    // Check auth session before calling the edge function
    const isSessionValid = await checkAuthSession();
    if (!isSessionValid) {
      const errorMsg = "Authentication session is invalid or expired";
      console.error(errorMsg);
      toast({
        variant: "destructive",
        title: "Authentication Error",
        description: "Your session has expired. Please sign in again."
      });
      throw new Error(errorMsg);
    }
    
    // Get fresh auth session to include in the invocation
    const { data: authData } = await supabase.auth.getSession();
    console.log(`Invoking edge function ${functionName} with:`, {
      ...payload,
      sessionInfo: {
        userId: authData?.session?.user?.id,
        hasSession: !!authData?.session,
        expiresAt: authData?.session ? new Date(authData.session.expires_at * 1000).toISOString() : 'none'
      }
    });
    
    // Send the request with a timeout
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), 30000); // 30 second timeout
    
    try {
      const { data, error } = await supabase.functions.invoke<T>(functionName, {
        body: payload
      });
      
      clearTimeout(timeoutId);
      
      if (error) {
        console.error(`Error invoking ${functionName}:`, error);
        
        // Enhanced error logging
        if (typeof error === 'object' && error !== null) {
          console.error('Edge Function Error Details:', JSON.stringify(error, null, 2));
          
          if ('message' in error) {
            console.error('Error message:', (error as any).message);
          }
          
          if ('status' in error) {
            console.error('Status code:', (error as any).status);
          }
          
          if ('data' in error) {
            console.error('Error data:', (error as any).data);
          }
          
          // Extract user-friendly error message if possible
          let errorMessage = `Error calling ${functionName}`;
          if ('message' in error && typeof (error as any).message === 'string') {
            errorMessage = (error as any).message;
          } else if ('error' in error && typeof (error as any).error === 'string') {
            errorMessage = (error as any).error;
          } else if ('error' in error && typeof (error as any).error === 'object' && (error as any).error && 'message' in (error as any).error) {
            errorMessage = (error as any).error.message;
          }
          
          toast({
            variant: "destructive",
            title: "Edge Function Error",
            description: errorMessage
          });
        }
        
        throw error;
      }
      
      console.log(`Edge function ${functionName} response:`, data);
      return data;
    } catch (abortError) {
      if (abortError.name === 'AbortError') {
        throw new Error(`Edge function ${functionName} timed out after 30 seconds`);
      }
      throw abortError;
    }
  } catch (error) {
    console.error(`Exception invoking ${functionName}:`, error);
    
    // Try to extract more detailed error information
    let errorMessage = "Unknown error";
    let statusCode = 500;
    
    if (typeof error === 'object' && error !== null) {
      // Try to extract the error message
      if ('message' in error) {
        errorMessage = (error as any).message;
      } else if ('error' in error && typeof (error as any).error === 'string') {
        errorMessage = (error as any).error;
      } else if (error instanceof Error) {
        errorMessage = error.message;
      }
      
      // Try to extract the status code
      if ('status' in error) {
        statusCode = (error as any).status;
      } else if ('statusCode' in error) {
        statusCode = (error as any).statusCode;
      } else if ('code' in error) {
        statusCode = (error as any).code;
      }
    }
    
    // Log detailed error info
    console.error(`Edge function error details: message=${errorMessage}, status=${statusCode}`);
    
    // Show a more user-friendly message based on status code
    if (statusCode === 401 || statusCode === 403) {
      toast({
        variant: "destructive",
        title: "Authentication Error", 
        description: "Please sign out and sign back in to refresh your session"
      });
    } else if (statusCode === 413) {
      toast({
        variant: "destructive",
        title: "File Too Large",
        description: "Your recording is too large. Please try a shorter recording."
      });
    } else if (statusCode >= 500) {
      toast({
        variant: "destructive",
        title: "Server Error",
        description: "The server encountered an error. Please try again later."
      });
    } else {
      toast({
        variant: "destructive",
        title: "Error",
        description: errorMessage
      });
    }
    
    throw error;
  }
};
